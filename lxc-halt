#!/bin/bash
#
# Halts a running container
#
# Triggers a 'halt' in the machine, then waits for the init process to be the
# only one left, then runs lxc-stop. There is a configurable timeout length for
# if containers are taking too long to shutdown.
#
# Copyright (c) 2010 Nigel McNie
#

# Default timeout for container shutdown
TIMEOUT=90


[ -f /etc/default/lxc ] && . /etc/default/lxc

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

while getopts "n:" flag
do
    case $flag in
        n) CONTAINER="$OPTARG" ;;
        *) echo "Unknown flag: $flag"; exit 1; ;;
    esac
done

if [ -z "$CONTAINER" ]; then
    echo "lxc-halt: missing container name, use -n option"
    exit 1
fi

if [ ! -d /var/lib/lxc/$CONTAINER/rootfs ]; then
    echo "lxc-halt: container $CONTAINER does not exist"
    exit 1
fi

# try to shut it down properly, then default on a destroy after $TIMEOUT seconds
if lxc-info -n $CONTAINER | grep -q "RUNNING" ; then
  echo "Shutting down $CONTAINER..."
  ssh -o StrictHostKeyChecking=no root@$CONTAINER "halt"
  timeout $TIMEOUT lxc-wait -n $CONTAINER -s STOPPED
  if [ $? -eq 124 ] ; then
    echo "$CONTAINER took too long (> $TIMEOUT seconds), destroying it..."
    lxc-stop -n $CONTAINER
  fi
else
  echo "Container $CONTAINER already shut down, skipping..."
fi

